name: 'RelizaHub get version'
description: 'Get version for creating a new release on RelizaHub'
branding:
  icon: 'info'
  color: 'green'
inputs:
  reliza_api_id:
    description: "Reliza Hub API ID"
    required: true
  reliza_api_key:
    description: "Reliza Hub API KEY"
    required: true
  reliza_api_url:
    description: "Reliza Hub API URL"
    required: false
    default: 'https://app.relizahub.com'
  path:
    description: "Path to the relative to root of the repo (default is '.')"
    required: false
    default: .
  ci_metadata:
    description: "Metadata for CI run, (Optional - default is GitHub)"
    required: false
  reliza_project_id:
    description: "Project UUID for this release if org-wide key is used"
    required: false
outputs:
  reliza_full_version:
    description: "Full Version"
    value: ${{ steps.extract-version.outputs.reliza_full_version }}
  reliza_short_version:
    description: "Short Version"
    value: ${{ steps.extract-version.outputs.reliza_short_version }}
  reliza_build_start:
    description: "Record build start time"
    value: ${{ steps.reliza-build-start.outputs.reliza_build_start }}
  reliza_do_build:
    description: "Flag to control if build should continue"
    value: ${{ steps.extract-commits.outputs.reliza_do_build }}
  reliza_last_commit:
    description: "Last recorded commit prior to this release"
    value: ${{ steps.extract-commits.outputs.reliza_last_commit }}
runs:
  using: "composite"
  steps:
    - id: reliza-build-start 
      name: Record build start 
      run: echo "reliza_build_start=$(date -Iseconds)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 200
    - name: Extract Last Release Commit And Prepare List Of Commits
      id: extract-commits
      shell: bash
      run: |
        cd ${{ inputs.path }}
        dobuild=false
        echo -n "-i ${{ inputs.reliza_api_id }} -k ${{ inputs.reliza_api_key }} -u ${{ inputs.reliza_api_url }} -b ${{github.ref_name}}"  > get_latest_release_cmd
        if [ ! -z ${{inputs.reliza_project_id}} ]
        then
          echo " --project ${{inputs.reliza_project_id}} " >> get_latest_release_cmd
        fi
        
        echo -n "reliza-cli getlatestrelease $(cat get_latest_release_cmd) " >> get_latest_release_exec
        latest_release=$(eval "$(cat get_latest_release_exec)")
        echo "latest_release: $latest_release"
        last_commit=$(echo $latest_release | jq -r ".sourceCodeEntryDetails.commit")
        if [ ! -z "$last_commit" ] && [ "null" != "$last_commit" ]
        then
          echo -n "--commits $(git log $last_commit..${{github.sha}} --date=iso-strict --pretty='%H|||%ad|||%s|||%an|||%ae' -- ${{ inputs.path }} | base64 -w 0) " > get_version_command
          difflines=$(git diff $last_commit..${{github.sha}} ${{ inputs.path }} | wc -l)
          if [ "$difflines" != "0" ]
          then
            dobuild=true
          fi
        else
          dobuild=true
        fi
        echo "DO_BUILD=$dobuild" >> $GITHUB_ENV
        echo "LAST_COMMIT=$last_commit" >> $GITHUB_ENV
        echo "reliza_do_build=$dobuild" >> $GITHUB_OUTPUT
        echo "reliza_last_commit=$last_commit" >> $GITHUB_OUTPUT
    - name: Get Version
      if: ${{env.DO_BUILD == 'true'}}
      shell: bash
      run: |
        cd ${{ inputs.path }}
        echo -n "-k ${{ inputs.reliza_api_key }} -i ${{ inputs.reliza_api_id }} -u ${{ inputs.reliza_api_url }} \
          -b ${{github.ref_name}} \
          --commit ${{github.sha}} \
          --commitmessage \"$(git log -1 --pretty='%s')\" \
          --date $(git log -1 --date=iso-strict --pretty='%ad') \
          --vcstype git --vcsuri github.com/${{github.repository}} " >> get_version_command
        if [ "${{inputs.ci_metadata}}" != "" ]
        then
          echo " --metadata ${{inputs.ci_metadata}} " >> get_version_command
        fi
        if [ ! -z ${{inputs.reliza_project_id}} ]
        then
          echo " --project ${{inputs.reliza_project_id}} " >> get_version_command
        fi
        # debug
        echo "$(cat get_version_command)"
        # get version
        echo -n "reliza-cli getversion $(cat get_version_command) " >> get_version_exec
        reliza_ver=$(eval "$(cat get_version_exec)")
        echo "completed getting ver"
        echo $reliza_ver
        echo "RLZ_VER_JSON=$reliza_ver" >> $GITHUB_ENV
    - id: extract-version
      if: ${{env.DO_BUILD == 'true'}}
      name: Extract Actual Version From JSON
      shell: bash
      run: |
        full_ver=$(echo $RLZ_VER_JSON | jq -r ".version")
        # version without meta for docker registry
        short_ver=$(echo $RLZ_VER_JSON | jq -r ".dockerTagSafeVersion")
        echo "reliza_full_version=$full_ver" >> $GITHUB_OUTPUT
        echo "reliza_short_version=$short_ver" >> $GITHUB_OUTPUT
